// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entrepro/ent/marketplaceitem"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Marketplaceitem is the model entity for the Marketplaceitem schema.
type Marketplaceitem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Marketplaceitem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case marketplaceitem.FieldID:
			values[i] = new(sql.NullInt64)
		case marketplaceitem.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Marketplaceitem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Marketplaceitem fields.
func (m *Marketplaceitem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case marketplaceitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case marketplaceitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Marketplaceitem.
// Note that you need to call Marketplaceitem.Unwrap() before calling this method if this Marketplaceitem
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Marketplaceitem) Update() *MarketplaceitemUpdateOne {
	return (&MarketplaceitemClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Marketplaceitem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Marketplaceitem) Unwrap() *Marketplaceitem {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Marketplaceitem is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Marketplaceitem) String() string {
	var builder strings.Builder
	builder.WriteString("Marketplaceitem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Marketplaceitems is a parsable slice of Marketplaceitem.
type Marketplaceitems []*Marketplaceitem

func (m Marketplaceitems) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
