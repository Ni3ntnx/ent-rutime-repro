// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entrepro/ent/marketplaceitem"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MarketplaceitemCreate is the builder for creating a Marketplaceitem entity.
type MarketplaceitemCreate struct {
	config
	mutation *MarketplaceitemMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (mc *MarketplaceitemCreate) SetDescription(s string) *MarketplaceitemCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// Mutation returns the MarketplaceitemMutation object of the builder.
func (mc *MarketplaceitemCreate) Mutation() *MarketplaceitemMutation {
	return mc.mutation
}

// Save creates the Marketplaceitem in the database.
func (mc *MarketplaceitemCreate) Save(ctx context.Context) (*Marketplaceitem, error) {
	var (
		err  error
		node *Marketplaceitem
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketplaceitemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Marketplaceitem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MarketplaceitemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MarketplaceitemCreate) SaveX(ctx context.Context) *Marketplaceitem {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MarketplaceitemCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MarketplaceitemCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MarketplaceitemCreate) check() error {
	if _, ok := mc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Marketplaceitem.description"`)}
	}
	return nil
}

func (mc *MarketplaceitemCreate) sqlSave(ctx context.Context) (*Marketplaceitem, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MarketplaceitemCreate) createSpec() (*Marketplaceitem, *sqlgraph.CreateSpec) {
	var (
		_node = &Marketplaceitem{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: marketplaceitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: marketplaceitem.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marketplaceitem.FieldDescription,
		})
		_node.Description = value
	}
	return _node, _spec
}

// MarketplaceitemCreateBulk is the builder for creating many Marketplaceitem entities in bulk.
type MarketplaceitemCreateBulk struct {
	config
	builders []*MarketplaceitemCreate
}

// Save creates the Marketplaceitem entities in the database.
func (mcb *MarketplaceitemCreateBulk) Save(ctx context.Context) ([]*Marketplaceitem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Marketplaceitem, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MarketplaceitemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MarketplaceitemCreateBulk) SaveX(ctx context.Context) []*Marketplaceitem {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MarketplaceitemCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MarketplaceitemCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
